// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid()) @db.VarChar(36)
  name     String  @db.VarChar(150)
  username String  @unique @db.VarChar(100)
  email    String  @unique @db.VarChar(100)
  password String? @db.VarChar(255)

  createdAt DateTime?
  updatedAt DateTime? 

  @@map("users")
}

model Province {
  id                  String                @id @default(uuid()) @db.VarChar(36)
  name                String                @unique @db.VarChar(200)
  regencies           Regency[]
  TraditionalClothing TraditionalClothing[]
  TraditionalHouse    TraditionalHouse[]
  TraditionalFood    TraditionalFood[]

  createdAt DateTime?
  updatedAt DateTime?

  @@map("provinces")
}

model Regency {
  id          String       @id @default(uuid()) @db.VarChar(36)
  name        String     @db.VarChar(100)
  province_id String
  province    Province   @relation(fields: [province_id], references: [id], onDelete:Cascade)
  District    District[]

  createdAt DateTime?
  updatedAt DateTime?

  @@map("regencies")
}

model District {
  id         String      @id @default(uuid()) @db.VarChar(36)
  name       String    @db.VarChar(100)
  regency_id String
  regency    Regency   @relation(fields: [regency_id], references: [id], onDelete:Cascade)
  Village    Village[]

  createdAt DateTime? 
  updatedAt DateTime?
  
  @@map("districts")
}

model Village {
  id          String     @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(100)
  district_id String
  district    District @relation(fields: [district_id], references: [id], onDelete:Cascade)
  postal_code String   @db.VarChar(10)

  createdAt DateTime? 
  updatedAt DateTime?
  
  @@map("villages")
}

model TraditionalClothing {
  id          String     @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  province_id String
  province    Province @relation(fields: [province_id], references: [id], onDelete:Cascade)
  image       String   @db.VarChar(255)

  createdAt DateTime? 
  updatedAt DateTime?
  
  @@map("traditional_clothings")
}

model TraditionalHouse {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  province_id String
  province    Province @relation(fields: [province_id], references: [id], onDelete:Cascade)
  image       String   @db.VarChar(255)

  createdAt DateTime? 
  updatedAt DateTime?
  
  @@map("traditional_houses")
}

model TraditionalFood {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  province_id String
  province    Province @relation(fields: [province_id], references: [id], onDelete:Cascade)
  image       String   @db.VarChar(255)

  createdAt DateTime? 
  updatedAt DateTime?
  
  @@map("traditional_foods")
}